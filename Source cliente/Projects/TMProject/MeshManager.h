#pragma once

class TMMesh;

struct stCommonMeshList
{
	char szFileName[64];
	TMMesh* pMesh;
	D3DXMATRIX* m_pBoneMatrix;
	DWORD* m_dwNames;
	DWORD m_dwID;
	DWORD m_numFaceInflunce;
	DWORD m_numPalette;
};

struct stValidAniList
{
	int nI;
};

struct stBoneAni
{
	char szAniName[128];
	unsigned int numBone; // 0x0ED9560
	unsigned int numParts; // 0x0ED9564
	unsigned int* pBone; // 0x0ED9568
	unsigned int numAniTypeCount; // 0x0ED956C
	unsigned int numAniCut[186]; // 0x0ED9570
	unsigned int numAniFrame; // 0x0ED9858
	LPD3DXMATRIX matAnimation; // 0x0ED985C
	LPD3DXQUATERNION matQuaternion; // 0x0ED9860
};

constexpr auto MAX_COMMON_MESH = 3048;
constexpr auto MAX_SKIN_MESH_LIST = 1024;
constexpr auto MAX_BONE_ANIMATION_LIST = 100;

constexpr auto MAX_ANI_CLASS = 6;
constexpr auto MAX_ANI_TYPE = 60;
constexpr auto MAX_ANI_MOTION = 56;

constexpr auto MAX_OBJECT_MASK = 2048;
constexpr auto MAX_MASK_X = 16;
constexpr auto MAX_MASK_Y = 16;

constexpr auto MAX_VALID_ANI_LIST = 100;

class MeshManager
{
public:
	MeshManager();
	virtual ~MeshManager();

	int InitMeshManager();
	virtual int InitBoneAnimation();
	virtual HRESULT RestoreDeviceObjects();
	void ReleaseMesh();
	void ReleaseNotUsingMesh();
	int ReadObjectMask();
	int LoadCommonMesh(int nIndex, int bEffect);
	TMMesh* GetCommonMesh(int nIndex, int bEffect, DWORD showTime);
	int GetSkinMeshIndex(char* szSkinMeshName);
	int GetAvailableSkinMeshIndex();

public:
	DWORD m_LastLoadTime;
	stCommonMeshList m_stCommonMesh[MAX_COMMON_MESH];
	stCommonMeshList m_stSkinMeshList[MAX_SKIN_MESH_LIST];

	static stBoneAni m_BoneAnimationList[MAX_BONE_ANIMATION_LIST];
	static short m_sAnimationArray[MAX_ANI_CLASS][MAX_ANI_TYPE][MAX_ANI_MOTION];
	static char m_aObjectMask[MAX_OBJECT_MASK][MAX_MASK_X][MAX_MASK_Y];
	static int m_nFullCount;

	stValidAniList m_stValidAniList[MAX_VALID_ANI_LIST][186];
};

static unsigned char ObjectMaskEncKeys[172] =
{
   0xB1, 0xDD, 0xB0, 0xAD, 0xBB, 0xEA, 0xC3, 0xA3, 0xBE, 0xC6, 0xB0, 0xA1, 0xC0, 0xDA, 0xC0, 0xCF, 0xB8,
   0xB8, 0xC0, 0xCC, 0xC3, 0xB5, 0xBA, 0xC0, 0xBA, 0xBC, 0xBC, 0xF6, 0xB7, 0xCF, 0xBE, 0xC6, 0xB8, 0xA7,
   0xB4, 0xE4, 0xB0, 0xED, 0xBD, 0xC5, 0xBA, 0xF1, 0xC7, 0xCF, 0xB1, 0xB8, 0xB3, 0xAA, 0xBF, 0xEC, 0xB8,
   0xAE, 0xB3, 0xAA, 0xB6, 0xF3, 0xC1, 0xC1, 0xC0, 0xBA, 0xB3, 0xAA, 0xB6, 0xF3, 0xBB, 0xF5, 0xB3, 0xAA,
   0xB6, 0xF3, 0xC0, 0xC7, 0xBE, 0xEE, 0xB8, 0xB0, 0xC0, 0xCC, 0xB4, 0xC2, 0xC0, 0xCF, 0xC2, 0xEF, 0xC0,
   0xCF, 0xBE, 0xEE, 0xB3, 0xB3, 0xB4, 0xCF, 0xB4, 0xD9, 0xC0, 0xE1, 0xB2, 0xD9, 0xB7, 0xAF, 0xB1, 0xE2,
   0xBE, 0xF8, 0xB4, 0xC2, 0xB3, 0xAA, 0xB6, 0xF3, 0xBF, 0xEC, 0xB8, 0xAE, 0xB3, 0xAA, 0xB6, 0xF3, 0xC1,
   0xC1, 0xC0, 0xBA, 0xB3, 0xAA, 0xB6, 0xF3, 0xB9, 0xAB, 0xB1, 0xC3, 0xC8, 0xAD, 0xB9, 0xAB, 0xB1, 0xC3,
   0xC8, 0xAD, 0xBF, 0xEC, 0xB8, 0xAE, 0xB3, 0xAA, 0xB6, 0xF3, 0xB2, 0xC9, 0xBB, 0xEF, 0xC3, 0xB5, 0xB8,
   0xAE, 0xB0, 0xAD, 0xBB, 0xEA, 0xBF, 0xA1, 0xBF, 0xEC, 0xB8, 0xAE, 0xB3, 0xAA, 0xB6, 0xF3, 0xB2, 0xC9,
   0x00, 0x00
};

extern int g_nMaxSizeOffset[MAX_BONE_ANIMATION_LIST];

struct stAniSoundTable
{
	unsigned int dwSpeed[56];
	unsigned int dwAniTable[56];
	unsigned int dwSoundTable[56];
};

struct stAniSoundTable2
{
	unsigned int dwSpeed[56];
	unsigned int dwAniTable[56];
};

extern stAniSoundTable2 g_MobAniTableEx[4][2];
extern stAniSoundTable g_MobAniTable[MAX_ANI_TYPE];